generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Radio {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  title       String?
  artist      String?
  audio_url   String?
  cover_image String?
  genre       String?

  @@map("radios")
}

model Track {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at    DateTime? @default(now()) @db.Timestamptz(6)
  title         String?
  artist        String?
  genre         String?
  audio_url     String?
  cover_image   String?
  soundcloudUrl String?
  duration      String?   @db.VarChar(10)
  file_size     BigInt?
  uploaded_by   String?
  is_published  Boolean?  @default(true) @map("is_published")
  uploader      User?     @relation("UserTracks", fields: [uploaded_by], references: [id], onUpdate: NoAction, map: "fk_tracks_user")

  @@index([is_published], map: "idx_tracks_is_published")
  @@index([uploaded_by], map: "idx_tracks_uploaded_by")
  @@map("tracks")
}

model User {
  id             String    @id @default(dbgenerated("(gen_random_uuid())::text"))
  email          String    @unique @db.VarChar(255)
  password_hash  String    @db.VarChar(255)
  name           String    @db.VarChar(255)
  role           String?   @default("dj") @db.VarChar(50)
  is_active      Boolean?  @default(true)
  created_at     DateTime? @default(now()) @db.Timestamp(6)
  updated_at     DateTime? @default(now()) @updatedAt @db.Timestamp(6)
  uploadedTracks Track[]   @relation("UserTracks")

  @@index([email], map: "idx_users_email")
  @@map("users")
}
